# first step of creating the package folder
library("devtools")
library(roxygen2)
# second step of creating the .rd of the functions in man folder
setwd("C:\\Users\\TOsosanya\\Desktop\\awapi\\R")
devtools::document()
install.packages("dplyr")
install.packages("lubridate")
devtools::document()
#test the functions
setwd("C:\\Users\\TOsosanya\\Desktop\\awapi")
devtools::install("awapi")
#test the functions
setwd("C:\\Users\\TOsosanya\\Desktop")
devtools::install("awapi")
library(awapi)
# install from git
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"),
rstudioapi::askForPassword("Password"))
# API Key -----------------------------------------------------------------
aw_set_api_key("UMGhuFhSoPE5japY8orbqC06F0oMZquv")
aw_is_api_key_set() # should yield TRUE else set key again
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
library(magrittr)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
hourly
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
daily
historical <- aw_24_hrs_condition(lat = 53.362893,lon = -2.4247147)
historical
a <- F_to_C(85)
a
b <- C_to_F(29.44444)
b
# install from git
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"),
rstudioapi::askForPassword("Password"))
devtools::install_git("https://gitlab.com/tayoso2/awapi.git",credentials = cred)
devtools::install_git("https://gitlab.com/tayoso2/awapi.git",credentials = cred)
library(awapi)
# API Key -----------------------------------------------------------------
aw_set_api_key("UMGhuFhSoPE5japY8orbqC06F0oMZquv")
aw_is_api_key_set() # should yield TRUE else set key again
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
hourly
devtools::install_git("https://gitlab.com/arcadis-code-repository/arcadisgen/awapi.git",credentials = cred)
library(awapi)
# API Key -----------------------------------------------------------------
aw_set_api_key("UMGhuFhSoPE5japY8orbqC06F0oMZquv")
aw_is_api_key_set() # should yield TRUE else set key again
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
hourly
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
daily
historical <- aw_24_hrs_condition(lat = 53.362893,lon = -2.4247147)
historical
a <- F_to_C(85)
a
b <- C_to_F(29.44444)
b
# second step of creating the .rd of the functions in man folder
setwd("C:\\Users\\TOsosanya\\Desktop\\awapi\\R")
devtools::document()
devtools::document()
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"),
rstudioapi::askForPassword("Password"))
## install the repo from either gitlab/tayoso or gitlab/arcadis-code...---
## devtools::install_git("https://gitlab.com/tayoso2/awapi.git",credentials = cred)
devtools::install_git("https://gitlab.com/arcadis-code-repository/arcadisgen/awapi.git",credentials = cred)
## install the repo from either gitlab/tayoso or gitlab/arcadis-code...---
## devtools::install_git("https://gitlab.com/tayoso2/awapi.git",credentials = cred)
devtools::install_git("https://gitlab.com/arcadis-code-repository/arcadisgen/awapi.git",credentials = cred)
install.packages("glue")
## install the repo from either gitlab/tayoso or gitlab/arcadis-code...---
## devtools::install_git("https://gitlab.com/tayoso2/awapi.git",credentials = cred)
devtools::install_git("https://gitlab.com/arcadis-code-repository/arcadisgen/awapi.git",credentials = cred)
library(awapi)
library(testthat)
aw_set_api_key("UMGhuFhSoPE5japY8orbqC06F0oMZquv")
aw_is_api_key_set() # should yield TRUE else set key again
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
renv::init()
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
aw_set_api_key
aw_set_api_key("UMGhuFhSoPE5japY8orbqC06F0oMZquv")
aw_is_api_key_set() # should yield TRUE else set key again
aw_is_api_key_set
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
aw_check_status_code
aw_12_hrs_forecast
hourly
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
install.packages("vctrs")
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
install.packages("lifecycle")
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
install.packages("tidyselect")
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
daily
aw_check_status_code(lat = 53.362893,lon = -2.4247147)
hourly <- aw_12_hrs_forecast(lat = 53.362893,lon = -2.4247147)
hourly
daily <- aw_5_days_forecast(lat = 53.362893,lon = -2.4247147)
daily
historical <- aw_24_hrs_condition(lat = 53.362893,lon = -2.4247147)
historical
a <- F_to_C(85)
a
b <- C_to_F(29.44444)
b
snapshot()
renv::snapshot()
round(85)
round(84.9)
round(C_to_F(29.44444))
aw_is_api_key_set() # should yield TRUE else set key again
test_that("aw_is_api_key_set", {
expect_true(aw_is_api_key_set())
})
test_that("temp_converter_1", {
expect_equal(F_to_C(85))
expect_equal(29.44444)
})
test_that("temp_converter_2", {
expect_equal(round(C_to_F(29.44444)))
expect_equal(85)
})
test_that("temp_converter", {
expect_equal(F_to_C(85),29.44444)
expect_equal(round(C_to_F(29.44444))),85)
})
test_that("temp_converter", {
expect_equal(F_to_C(85),29.44444)
expect_equal(round(C_to_F(29.44444)),85)
})
F_to_C(85)
test_that("temp_converter", {
expect_equal(round(F_to_C(85)),29)
expect_equal(round(C_to_F(29.44444)),85)
})
test_package(awapi)
test_package(dplyr)
test_package("dplyr")
test_check("dplyr")
if (!require(testthat)) install.packages('testthat')
test_that("aw_is_api_key_set", {
expect_output(hourly, NULL)
})
historical
hourly
test_that("aw_is_api_key_set", {
expect_output(hourly, NULL)
})
test_that("test that results are not empty", {
expect_output(print(hourly), NULL)
})
test_that("is_api_key_set?", {
expect_true(aw_is_api_key_set())
})
test_that("temp_converter", {
expect_equal(round(F_to_C(85)),29)
expect_equal(round(C_to_F(29.44444)),85)
})
test_that("test that results are not empty", {
expect_output(print(hourly), NULL)
expect_output(print(daily), NULL)
expect_output(print(historical), NULL)
})
test_that("empty vector", {
expect_equal(increment(c()), c())
})
test_that("is_api_key_set?", {
expect_true(aw_is_api_key_set())
})
test_that("temp_converter", {
expect_equal(round(F_to_C(85)),29)
expect_equal(round(C_to_F(29.44444)),85)
})
test_that("test that results are not empty", {
expect_output(print(hourly), NULL)
expect_output(print(daily), NULL)
expect_output(print(historical), NULL)
})
getwd()
testthat::test_dir('tests')
testthat::test_dir('test')
